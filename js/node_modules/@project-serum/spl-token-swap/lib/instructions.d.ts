/// <reference types="node" />
import { Numberu64 } from '@solana/spl-token-swap';
import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import { Layout, Structure } from 'buffer-layout';
import { AccountInfo, MintInfo } from '@solana/spl-token';
import { PoolConfig } from './types';
export { TokenSwap } from '@solana/spl-token-swap';
export declare const PROGRAM_ID_V1: PublicKey;
export declare const PROGRAM_ID: PublicKey;
export declare const TOKEN_PROGRAM_ID: PublicKey;
export declare const WRAPPED_SOL_MINT: PublicKey;
export declare const SWAP_PROGRAM_OWNER_FEE_ADDRESS: PublicKey;
export declare const DEFAULT_LIQUIDITY_TOKEN_PRECISION = 8;
export declare const LATEST_VERSION = 2;
export declare function getProgramVersion(programId: PublicKey): number;
/**
 * Layout for a public key
 */
export declare const publicKey: (property?: string) => any;
/**
 * Layout for a 64bit unsigned value
 */
export declare const uint64: (property?: string) => any;
export declare const TokenSwapLayoutLegacyV0: any;
export declare const TokenSwapLayoutV1: Structure;
export declare const TokenSwapLayout: Structure;
export declare function getLayoutForProgramId(programId: PublicKey): Structure;
export declare function getCreateInitSwapInstructionV2Layout(config: PoolConfig): Structure;
export declare const createInitSwapInstruction: (tokenSwapAccount: PublicKey, authority: PublicKey, tokenAccountA: PublicKey, tokenAccountB: PublicKey, tokenPool: PublicKey, feeAccount: PublicKey, tokenAccountPool: PublicKey, tokenProgramId: PublicKey, swapProgramId: PublicKey, nonce: number, config: PoolConfig) => TransactionInstruction;
export declare const depositInstruction: (tokenSwap: PublicKey, authority: PublicKey, transferAuthority: PublicKey, sourceA: PublicKey, sourceB: PublicKey, intoA: PublicKey, intoB: PublicKey, poolToken: PublicKey, poolAccount: PublicKey, swapProgramId: PublicKey, tokenProgramId: PublicKey, poolTokenAmount: number | Numberu64, maximumTokenA: number | Numberu64, maximumTokenB: number | Numberu64) => TransactionInstruction;
export declare const depositExactOneInstruction: (tokenSwap: PublicKey, authority: PublicKey, transferAuthority: PublicKey, source: PublicKey, intoA: PublicKey, intoB: PublicKey, poolToken: PublicKey, poolAccount: PublicKey, swapProgramId: PublicKey, tokenProgramId: PublicKey, sourceTokenAmount: number | Numberu64, minimumPoolTokenAmount: number | Numberu64, isLatest: boolean) => TransactionInstruction;
export declare const withdrawInstruction: (tokenSwap: PublicKey, authority: PublicKey, transferAuthority: PublicKey, poolMint: PublicKey, feeAccount: PublicKey | undefined, sourcePoolAccount: PublicKey, fromA: PublicKey, fromB: PublicKey, userAccountA: PublicKey, userAccountB: PublicKey, swapProgramId: PublicKey, tokenProgramId: PublicKey, poolTokenAmount: number | Numberu64, minimumTokenA: number | Numberu64, minimumTokenB: number | Numberu64) => TransactionInstruction;
export declare const withdrawExactOneInstruction: (tokenSwap: PublicKey, authority: PublicKey, transferAuthority: PublicKey, poolMint: PublicKey, sourcePoolAccount: PublicKey, fromA: PublicKey, fromB: PublicKey, userAccount: PublicKey, feeAccount: PublicKey | undefined, swapProgramId: PublicKey, tokenProgramId: PublicKey, sourceTokenAmount: number | Numberu64, maximumTokenAmount: number | Numberu64, isLatest: boolean) => TransactionInstruction;
export declare const swapInstruction: (tokenSwap: PublicKey, authority: PublicKey, transferAuthority: PublicKey, userSource: PublicKey, poolSource: PublicKey, poolDestination: PublicKey, userDestination: PublicKey, poolMint: PublicKey, feeAccount: PublicKey, swapProgramId: PublicKey, tokenProgramId: PublicKey, amountIn: number | Numberu64, minimumAmountOut: number | Numberu64, programOwner?: PublicKey | undefined) => TransactionInstruction;
export interface Mint {
    mintAuthority: Buffer;
    supply: Buffer;
    decimals: number;
    isInitialized: number;
    freezeAuthority: Buffer | null;
}
export declare const MINT_LAYOUT: Layout<Mint>;
export declare const deserializeMint: (data: Buffer) => MintInfo;
export declare function parseTokenAccount(data: Buffer): AccountInfo;
//# sourceMappingURL=instructions.d.ts.map