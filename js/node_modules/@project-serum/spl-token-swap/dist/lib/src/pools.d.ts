import { MintInfo, u64 } from '@solana/spl-token';
import { Account, Commitment, Connection, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';
import { PoolConfig, PoolOptions, TokenAccount } from './types';
export declare class Pool {
    private _decoded;
    private _programId;
    private _poolAccount;
    private _tokenMints;
    private _holdingAccounts;
    private _poolTokenMint;
    private _feeAccount;
    private _skipPreflight;
    private _commitment;
    private _mintAccountsCache;
    private _tokenAccountsCache;
    constructor(decoded: any, // todo: remove any
    poolAccount: PublicKey, programId: PublicKey, options?: PoolOptions);
    static load(connection: Connection, address: PublicKey, programId: PublicKey, options?: PoolOptions): Promise<Pool>;
    get address(): PublicKey;
    get publicKey(): PublicKey;
    get programVersion(): number;
    cached<T>(callable: () => Promise<T>, cache: {
        [key: string]: {
            value: T;
            ts: number;
        };
    }, key: string, cacheDurationMs: number): Promise<T>;
    getCachedMintAccount(connection: Connection, pubkey: PublicKey | string, cacheDurationMs?: number): Promise<MintInfo>;
    getCachedTokenAccount(connection: Connection, pubkey: PublicKey | string, cacheDurationMs?: number): Promise<TokenAccount>;
    makeRemoveLiquidityTransaction<T extends PublicKey | Account>(connection: Connection, owner: T, liquidityAmount: number, poolAccount: TokenAccount, tokenAccounts: TokenAccount[]): Promise<{
        transaction: Transaction;
        signers: Account[];
        payer: T;
    }>;
    makeAddLiquidityTransaction<T extends PublicKey | Account>(connection: Connection, owner: T, sourceTokenAccounts: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }[], poolTokenAccount?: PublicKey, slippageTolerance?: number): Promise<{
        transaction: Transaction;
        signers: Account[];
        payer: T;
    }>;
    makeSwapTransaction<T extends PublicKey | Account>(connection: Connection, owner: T, tokenIn: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }, tokenOut: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }, slippage: number, hostFeeAccount?: PublicKey): Promise<{
        transaction: Transaction;
        signers: Account[];
        payer: T;
    }>;
    swap(connection: Connection, owner: Account, tokenIn: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }, tokenOut: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }, slippage: number, hostFeeAccount?: PublicKey, skipPreflight?: boolean, commitment?: Commitment): Promise<string>;
    static makeInitializePoolTransaction<T extends PublicKey | Account>(connection: Connection, owner: T, componentMints: PublicKey[], sourceTokenAccounts: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }[], options: PoolConfig, liquidityTokenPrecision?: number): Promise<{
        initializeAccountsTransaction: Transaction;
        initializeAccountsSigners: Account[];
        initializePoolTransaction: Transaction;
        initializePoolSigners: Account[];
    }>;
    static initializePool(connection: Connection, owner: Account, componentMints: PublicKey[], sourceTokenAccounts: {
        mint: PublicKey;
        tokenAccount: PublicKey;
        amount: number;
    }[], options: PoolConfig, liquidityTokenPrecision?: number, skipPreflight?: boolean, commitment?: Commitment): Promise<string>;
    getHoldings(connection: Connection): Promise<{
        account: PublicKey;
        mint: PublicKey;
        holding: u64;
    }[]>;
    get fees(): {
        tradeFee: number;
        ownerFee: number;
        withdrawFee: number;
    };
}
export declare const getMintAccount: (connection: Connection, pubKey: PublicKey | string) => Promise<MintInfo>;
export declare const getTokenAccount: (connection: Connection, pubKey: PublicKey | string) => Promise<TokenAccount>;
export declare const createTokenAccount: (owner: PublicKey, payer: PublicKey, mint: PublicKey, lamports: number) => {
    account: Account;
    instructions: TransactionInstruction[];
    cleanUpInstructions: TransactionInstruction[];
};
